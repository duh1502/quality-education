{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "523328b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Verificar os melhores modelos\n",
    "df_results.sort_values([ 'rmse'], ascending=False)\n",
    " \n",
    "Leitura dos dados de teste\n",
    "df_test = pd.read_csv('../input/qualityeducation/test.csv')\n",
    "print(df_test.shape)\n",
    "\n",
    "df_test['TP_STATUS_REDACAO'].fillna(0, inplace=True)\n",
    "\n",
    "df_test['NU_IDADE'].fillna(21, inplace=True)\n",
    "\n",
    "# IDHM Fonte: http://www.atlasbrasil.org.br/ranking\n",
    "# Adicionar dados do IDH - Índice de Desenvolvimento Humano Municipal Brasileiro\n",
    "df_idhm_ifdm = pd.read_csv('https://raw.githubusercontent.com/rrpronaldo/quality_education/main/dataset_idhm_ifdm.csv')\n",
    "dict_idhm = dict(zip(df_idhm_ifdm.CO_MUNICIPIO,df_idhm_ifdm.VR_IDHM))\n",
    "df_test['VR_IDHM'] = df_test.CO_MUNICIPIO_RESIDENCIA.map(dict_idhm)\n",
    "print(df_test['VR_IDHM'].isna().sum())\n",
    "\n",
    "df_test['TP_SEXO'] = df_test['TP_SEXO'].apply(lambda x: 1 if x ==\"F\" else 0)\n",
    "\n",
    "df_test[\"NO_IDADE_GROUP\"] = pd.cut(df_test.NU_IDADE, group, labels=cats)\n",
    "\n",
    "df_test[\"IN_ATEND_ESPECIAL\"] = df_test[colunas_atend_especial].max(axis=1)\n",
    "\n",
    "df_test[\"IN_ATEND_ESPECIFICO\"] = df_test[colunas_atend_especifico].max(axis=1)\n",
    "df_test[\"IN_RECURSO_ESPECIAL\"] = df_test[\"IN_SEM_RECURSO\"]\n",
    "\n",
    "df_test['CO_REGIAO_RESIDENCIA'] = df_test['CO_MUNICIPIO_RESIDENCIA'].astype(str).str[:3]\n",
    "\n",
    "#IFDM Educação Fonte:http://www.ipeadata.gov.br/Default.aspx\n",
    "df_ifdm = pd.read_csv('https://raw.githubusercontent.com/rrpronaldo/quality_education/main/dataset_idhm_ifdm.csv')\n",
    "\n",
    "dict_ifdm = dict(zip(df_ifdm.CO_MUNICIPIO,df_ifdm.IFDM_2010))\n",
    "\n",
    "df_test['VR_IFDM'] = df_test.CO_MUNICIPIO_RESIDENCIA.map(dict_ifdm)\n",
    "print(df_test['VR_IFDM'].isna().sum())\n",
    "#Selecionar apenas as colunas usadas no treino\n",
    "df_test = df_test[list(set(df_train.columns) - set(targets) )]\n",
    "getMissing(df_test)\n",
    "# Reduzir a memória utilizada pelo DataFrame de teste\n",
    "df_test = reduce_mem_usage(df_test)\n",
    "#Selecionar as mesmas variáveis para o dataframe de test\n",
    "df_test_modelo = df_test[X.columns]\n",
    "df_test_modelo.head(1)\n",
    "#!ls './modelos'\n",
    "targets\n",
    "#Percorrer as colunas de notas e fazer a predição dos resultados\n",
    "for target in targets:\n",
    "  print(target)\n",
    "\n",
    "  #Carregar o modelo salvo no treinamento\n",
    "  pipeline_XGB = joblib.load(f'pipeline_Lasso_{target}_MODEL.pkl') \n",
    "\n",
    "  #Prever as notas conforme o modelo\n",
    "  respostas_test = pipeline_XGB.predict(df_test_modelo)\n",
    "\n",
    "  #Atribuir as notas preditas para o dataset de teste\n",
    "  df_test[target] = respostas_test\n",
    "#Verificar quem não fez a prova\n",
    "df_test[['TP_PRESENCA_LC', 'TP_PRESENCA_CH', 'TP_PRESENCA_MT', 'TP_PRESENCA_CN']].apply(pd.Series.value_counts)\n",
    "dict_notas = {'NU_NOTA_CN':'TP_PRESENCA_CN',\n",
    "                 'NU_NOTA_CH':'TP_PRESENCA_CH',\n",
    "                 'NU_NOTA_LC':'TP_PRESENCA_LC',\n",
    "                 'NU_NOTA_MT':'TP_PRESENCA_MT',\n",
    "#!ls './modelos'\n",
    "targets\n",
    "#Percorrer as colunas de notas e fazer a predição dos resultados\n",
    "for target in targets:\n",
    "  print(target)\n",
    "\n",
    "  #Carregar o modelo salvo no treinamento\n",
    "  pipeline_XGB = joblib.load(f'pipeline_Lasso_{target}_MODEL.pkl') \n",
    "\n",
    "  #Prever as notas conforme o modelo\n",
    "  respostas_test = pipeline_XGB.predict(df_test_modelo)\n",
    "\n",
    "  #Atribuir as notas preditas para o dataset de teste\n",
    "  df_test[target] = respostas_test\n",
    "#Verificar quem não fez a prova\n",
    "df_test[['TP_PRESENCA_LC', 'TP_PRESENCA_CH', 'TP_PRESENCA_MT', 'TP_PRESENCA_CN']].apply(pd.Series.value_counts)\n",
    "dict_notas = {'NU_NOTA_CN':'TP_PRESENCA_CN',\n",
    "                 'NU_NOTA_CH':'TP_PRESENCA_CH',\n",
    "                 'NU_NOTA_LC':'TP_PRESENCA_LC',\n",
    "                 'NU_NOTA_MT':'TP_PRESENCA_MT',"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
